{"version":3,"sources":["Container/index.js","Footer/index.js","Result/index.js","Input/index.js","Select/index.js","Label/index.js","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Footer","name","Result","amount","result","currency","Input","changeAmount","type","step","required","autoFocus","placeholder","min","value","onChange","Select","handleCurrencySelect","Label","spanContent","userActionField","Form","countResult","resultAmount","resultCurrency","saveResultData","useState","setAmount","setCurrency","showResult","setShowResult","onSubmit","event","preventDefault","target","App","setResult","setResultAmount","setResultCurrency","currencies","id","console","log","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3000957.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Container = ({children}) => (\r\n        <div className=\"container\">\r\n            {children}\r\n        </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Footer = ({name}) => (\r\n    <footer className=\"footer\">\r\n        &copy;{name}\r\n    </footer>\r\n);\r\nexport default Footer;","import React from 'react'; \r\nimport './style.css';\r\n\r\nconst Result = ({amount, result, currency}) => (\r\n<div className=\"form__result\">{amount}PLN = <strong>{result}{currency}</strong></div>\r\n);\r\n\r\nexport default Result;","import React from 'react';\r\n\r\nconst Input = ({amount, changeAmount}) => (\r\n    <input \r\n        className=\"form__userAction\"\r\n        type=\"number\" \r\n        step=\"0.01\" \r\n        required \r\n        autoFocus\r\n        placeholder=\"Wpisz kwotę\"\r\n        min=\"0.01\" \r\n        value={amount}\r\n        onChange={changeAmount}\r\n    />\r\n);\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nconst Select = ({currency, handleCurrencySelect}) => (\r\n    <select \r\n        value={currency}\r\n        required\r\n        name=\"currencies\" \r\n        className=\"form__userAction\"\r\n        onChange={handleCurrencySelect}\r\n    >\r\n        <option className=\"form__currency\" value=\"\">Rozwiń, aby wybrać walutę</option>\r\n        <option className=\"form__currency\" value=\"EUR\">Euro</option>\r\n        <option className=\"form__currency\" value=\"USD\">Dolar amerykański</option>\r\n        <option className=\"form__currency\" value=\"GBP\">Funt szterling</option>\r\n        <option className=\"form__currency\" value=\"CHF\">Frank szwajcarski</option>\r\n    </select>\r\n);\r\n\r\nexport default Select;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Label = ({spanContent, userActionField}) => (\r\n    <label className=\"form__label\">\r\n        <span className=\"form__span\">{spanContent}*:</span>\r\n        {userActionField}\r\n    </label>\r\n);\r\n\r\nexport default Label;","import React, { useState } from 'react';\r\nimport Result from '../Result';\r\nimport Input from '../Input';\r\nimport Select from '../Select';\r\nimport Label from '../Label';\r\nimport './style.css';\r\n\r\nconst Form = ({countResult, result, resultAmount, resultCurrency, saveResultData}) => {\r\n    const [amount, setAmount] = useState(\"\")\r\n    const [currency, setCurrency] = useState(\"\")\r\n    const [showResult, setShowResult] = useState(false)\r\n\r\n    const changeAmount = (event) => {\r\n        setAmount(event.target.value)\r\n    }\r\n    \r\n    \r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        countResult(amount, currency);\r\n        saveResultData(amount, currency);\r\n        setShowResult(true)\r\n        setAmount(\"\");   \r\n        setCurrency(\"\");\r\n            \r\n    }\r\n    const handleCurrencySelect = (event) => {\r\n        setCurrency(event.target.value);\r\n    }\r\n\r\n    return <form \r\n                className=\"form\"\r\n                onSubmit={onFormSubmit}\r\n            >\r\n                \r\n            <h1 className=\"form__title\">Przelicznik walut</h1>\r\n            <Label \r\n                spanContent={\"Kwota w zł\"} \r\n                userActionField={\r\n                                <Input \r\n                                    amount={amount}\r\n                                    changeAmount={changeAmount}\r\n                                />\r\n                                }\r\n            />\r\n            <Label \r\n                spanContent={\"Waluta\"}\r\n                userActionField={\r\n                                <Select \r\n                                    currency={currency}\r\n                                    handleCurrencySelect={handleCurrencySelect} \r\n                                />\r\n                                }\r\n            />    \r\n          <button className=\"form__button\">Przelicz</button>\r\n          <p className=\"form__info\">Waluty przeliczane są na podstawie danych z tabeli nr 158/A/NBP/2020 z dnia 2020-08-14 </p>\r\n          {showResult ? <Result amount={resultAmount} result={result} currency={resultCurrency} /> : \"\"}\r\n    </form>\r\n    \r\n};\r\n\r\nexport default Form;","import React, { useState } from 'react';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Form from './Form';\n\nfunction App() {\n  const [result, setResult] = useState(0)\n  const [resultAmount, setResultAmount] = useState(0)\n  const [resultCurrency, setResultCurrency] = useState(\"\")\n\n  const currencies = [\n    {\n      id: 1, \n      name: \"EUR\",\n      value: 4.3988,\n    },\n    {\n      id: 2, \n      name: \"USD\",\n      value: 3.7227,\n    },\n    {\n      id: 3, \n      name: \"GBP\",\n      value: 4.8692,\n    },\n    {\n      id: 4, \n      name: \"CHF\",\n      value: 4.0906,\n    },\n  ];\n\n  const saveResultData = (amount, currency) => {\n    setResultAmount(amount);\n    setResultCurrency(currency);\n  }\n\n  const countResult = (amount, currency) => {\n     return currency === currencies[0].name ? setResult(amount/currencies[0].value)\n          : currency === currencies[1].name ? setResult(amount/currencies[1].value)\n          : currency === currencies[2].name ? setResult(amount/currencies[2].value)\n          : setResult(amount/currencies[3].value);\n  };\n  console.log(result.toFixed(3))\n\n  return (\n    <Container>\n        <Form \n          countResult={countResult} \n          result={result.toFixed(3)} \n          saveResultData={saveResultData}\n          resultAmount={resultAmount} \n          resultCurrency={resultCurrency} \n        />\n        <Footer name={\"Krzysztof Kwieciński 2020\"} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}