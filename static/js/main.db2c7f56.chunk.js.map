{"version":3,"sources":["Container/index.js","Footer/index.js","Form/Result/index.js","Form/Input/index.js","currencies.js","Form/Select/index.js","Form/Label/index.js","Form/Clock/index.js","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Footer","name","Result","result","undefined","fromAmount","toAmount","currency","Input","amount","changeAmount","type","step","required","autoFocus","placeholder","min","value","onChange","currencies","id","shortname","fullname","Select","handleCurrencySelect","map","key","Label","spanContent","userActionField","Clock","useState","Date","date","setDate","useEffect","intervalID","setInterval","clearInterval","day","toLocaleDateString","month","weekday","time","toLocaleTimeString","Form","countResult","setAmount","setCurrency","onSubmit","event","preventDefault","target","App","setResult","rate","find","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db2c7f56.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Container = ({children}) => (\r\n        <div className=\"container\">\r\n            {children}\r\n        </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Footer = ({name}) => (\r\n    <footer className=\"footer\">\r\n        &copy;{name}\r\n    </footer>\r\n);\r\nexport default Footer;","import React from 'react'; \r\nimport './style.css';\r\n\r\nconst Result = ({result}) => (\r\n    <div className=\"form__result\">\r\n        {\r\n            result !== undefined ? \r\n                <>\r\n                    {result.fromAmount}&nbsp;PLN&nbsp;= \r\n                    <strong>\r\n                        {\" \"}{result.toAmount}&nbsp;{result.currency}\r\n                    </strong> \r\n                </>\r\n                :\r\n                \"\"\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default Result;","import React from 'react';\r\n\r\nconst Input = ({amount, changeAmount}) => (\r\n    <input \r\n        className=\"form__userAction\"\r\n        type=\"number\" \r\n        step=\"0.01\" \r\n        required \r\n        autoFocus\r\n        placeholder=\"Wpisz kwotę\"\r\n        min=\"0.01\" \r\n        value={amount}\r\n        onChange={changeAmount}\r\n    />\r\n);\r\n\r\nexport default Input;","export const currencies = [\r\n    {\r\n      id: 1, \r\n      shortname: \"EUR\",\r\n      fullname: \"Euro\",\r\n      value: 4.3988,\r\n    },\r\n    {\r\n      id: 2, \r\n      shortname: \"USD\",\r\n      fullname: \"Dolar amerykański\",\r\n      value: 3.7227,\r\n    },\r\n    {\r\n      id: 3, \r\n      shortname: \"GBP\",\r\n      fullname: \"Funt szterling\",\r\n      value: 4.8692,\r\n    },\r\n    {\r\n      id: 4, \r\n      shortname  : \"CHF\",\r\n      fullname: \"Frank szwajcarski\",\r\n      value: 4.0906,\r\n    },\r\n  ];","import React from 'react';\r\nimport { currencies } from '../../currencies'\r\n\r\nconst Select = ({currency, handleCurrencySelect}) => (\r\n    <select \r\n        value={currency}\r\n        required\r\n        name=\"currencies\" \r\n        className=\"form__userAction\"\r\n        onChange={handleCurrencySelect}\r\n    >\r\n        <option \r\n            className=\"form__currency\" \r\n            value=\"\"\r\n        >\r\n                Rozwiń, aby wybrać walutę\r\n        </option>\r\n        {currencies.map(({id, shortname, fullname}) => \r\n            <option \r\n                className=\"form__currency\" \r\n                key={id} \r\n                value={shortname}\r\n            >\r\n                    {fullname}\r\n            </option>\r\n        )}\r\n    </select>\r\n);\r\n\r\nexport default Select;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Label = ({spanContent, userActionField}) => (\r\n    <label className=\"form__label\">\r\n        <span className=\"form__span\">{spanContent}*:</span>\r\n        {userActionField}\r\n    </label>\r\n);\r\n\r\nexport default Label;","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nimport './style.css';\r\n\r\nconst Clock = () => {\r\n\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {      \r\n        const intervalID = setInterval(() => {\r\n            setDate(date => date = new Date())\r\n        }, 1000);\r\n\r\n        return () => { \r\n            clearInterval(intervalID)\r\n        };\r\n    }, [])\r\n\r\n    const day = date.toLocaleDateString(\"pl-PL\", {\r\n                    day: \"numeric\", \r\n                    month: \"long\",\r\n                    weekday: \"long\"\r\n                });\r\n    const time = date.toLocaleTimeString();\r\n\r\n    return (\r\n        <>\r\n        <div className=\"clock\">\r\n            Dzisiaj jest {day}, {time}\r\n        </div>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default Clock;","import React, { useState } from 'react';\r\nimport Result from './Result';\r\nimport Input from './Input';\r\nimport Select from './Select';\r\nimport Label from './Label';\r\nimport Clock from './Clock';\r\nimport './style.css';\r\n\r\nconst Form = ({countResult, result}) => {\r\n    const [amount, setAmount] = useState(\"\")\r\n    const [currency, setCurrency] = useState(\"\")\r\n\r\n    const changeAmount = ({target}) => {\r\n        setAmount(target.value)\r\n    }\r\n    \r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        countResult(amount, currency);\r\n        setAmount(\"\");   \r\n        setCurrency(\"\");\r\n            \r\n    }\r\n    const handleCurrencySelect = ({target}) => {\r\n        setCurrency(target.value);\r\n    }\r\n\r\n    return <form \r\n                className=\"form\"\r\n                onSubmit={onFormSubmit}\r\n            >\r\n            <Clock />\r\n            <h1 className=\"form__title\">Przelicznik walut</h1>\r\n            <Label \r\n                spanContent={\"Kwota w zł\"} \r\n                userActionField={\r\n                                <Input \r\n                                    amount={amount}\r\n                                    changeAmount={changeAmount}\r\n                                />\r\n                                }\r\n            />\r\n            <Label \r\n                spanContent={\"Waluta\"}\r\n                userActionField={\r\n                                <Select \r\n                                    currency={currency}\r\n                                    handleCurrencySelect={handleCurrencySelect} \r\n                                />\r\n                                }\r\n            />    \r\n          <button className=\"form__button\">Przelicz</button>\r\n          <p className=\"form__info\">Waluty przeliczane są na podstawie danych z tabeli nr 158/A/NBP/2020 z dnia 2020-08-14 </p>\r\n          <Result result={result} />\r\n    </form>\r\n    \r\n};\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\nimport Form from './Form';\r\nimport { currencies } from './currencies'\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState()  \r\n\r\n  const countResult = (amount, currency) => {\r\n    const rate = currencies.find(({shortname}) => shortname === currency).value;\r\n    \r\n    setResult({\r\n      fromAmount: +amount,\r\n      toAmount: (amount / rate).toFixed(3),\r\n      currency,\r\n    })\r\n  };\r\n  \r\n  return (\r\n    <Container>\r\n        <Form \r\n          countResult={countResult} \r\n          result={result}\r\n        />\r\n        <Footer name={\"Krzysztof Kwieciński 2020\"} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}